/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.15.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.virtuslab.kubernetes.client.openapi.api

import com.virtuslab.kubernetes.client.openapi.model.V1APIResourceList
import com.virtuslab.kubernetes.client.openapi.model.V1Binding
import com.virtuslab.kubernetes.client.openapi.model.V1ComponentStatus
import com.virtuslab.kubernetes.client.openapi.model.V1ComponentStatusList
import com.virtuslab.kubernetes.client.openapi.model.V1ConfigMap
import com.virtuslab.kubernetes.client.openapi.model.V1ConfigMapList
import com.virtuslab.kubernetes.client.openapi.model.V1DeleteOptions
import com.virtuslab.kubernetes.client.openapi.model.V1Endpoints
import com.virtuslab.kubernetes.client.openapi.model.V1EndpointsList
import com.virtuslab.kubernetes.client.openapi.model.V1Event
import com.virtuslab.kubernetes.client.openapi.model.V1EventList
import com.virtuslab.kubernetes.client.openapi.model.V1LimitRange
import com.virtuslab.kubernetes.client.openapi.model.V1LimitRangeList
import com.virtuslab.kubernetes.client.openapi.model.V1Namespace
import com.virtuslab.kubernetes.client.openapi.model.V1NamespaceList
import com.virtuslab.kubernetes.client.openapi.model.V1Node
import com.virtuslab.kubernetes.client.openapi.model.V1NodeList
import com.virtuslab.kubernetes.client.custom.V1Patch
import com.virtuslab.kubernetes.client.openapi.model.V1PersistentVolume
import com.virtuslab.kubernetes.client.openapi.model.V1PersistentVolumeClaim
import com.virtuslab.kubernetes.client.openapi.model.V1PersistentVolumeClaimList
import com.virtuslab.kubernetes.client.openapi.model.V1PersistentVolumeList
import com.virtuslab.kubernetes.client.openapi.model.V1Pod
import com.virtuslab.kubernetes.client.openapi.model.V1PodList
import com.virtuslab.kubernetes.client.openapi.model.V1PodTemplate
import com.virtuslab.kubernetes.client.openapi.model.V1PodTemplateList
import com.virtuslab.kubernetes.client.openapi.model.V1ReplicationController
import com.virtuslab.kubernetes.client.openapi.model.V1ReplicationControllerList
import com.virtuslab.kubernetes.client.openapi.model.V1ResourceQuota
import com.virtuslab.kubernetes.client.openapi.model.V1ResourceQuotaList
import com.virtuslab.kubernetes.client.openapi.model.V1Scale
import com.virtuslab.kubernetes.client.openapi.model.V1Secret
import com.virtuslab.kubernetes.client.openapi.model.V1SecretList
import com.virtuslab.kubernetes.client.openapi.model.V1Service
import com.virtuslab.kubernetes.client.openapi.model.V1ServiceAccount
import com.virtuslab.kubernetes.client.openapi.model.V1ServiceAccountList
import com.virtuslab.kubernetes.client.openapi.model.V1ServiceList
import com.virtuslab.kubernetes.client.openapi.model.V1Status
import com.virtuslab.kubernetes.client.openapi.model.V1beta1Eviction
import com.virtuslab.kubernetes.client.openapi.core._
import com.virtuslab.kubernetes.client.openapi.core.CollectionFormats._
import com.virtuslab.kubernetes.client.openapi.core.ApiKeyLocations._

object CoreV1Api {

  def apply(baseUrl: String = "http://localhost") = new CoreV1Api(baseUrl)
}

class CoreV1Api(baseUrl: String) {
  
  /**
   * connect DELETE requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectDeleteNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect DELETE requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectDeleteNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect DELETE requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectDeleteNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect DELETE requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectDeleteNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect DELETE requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectDeleteNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect DELETE requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectDeleteNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to attach of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
   * @param name name of the PodAttachOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
   * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
   * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
   * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
   */
  def connectGetNamespacedPodAttach(container: Option[String] = None, name: String, namespace: String, stderr: Option[Boolean] = None, stdin: Option[Boolean] = None, stdout: Option[Boolean] = None, tty: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/attach", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("container", container)
      .withQueryParam("stderr", stderr)
      .withQueryParam("stdin", stdin)
      .withQueryParam("stdout", stdout)
      .withQueryParam("tty", tty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to exec of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param command Command is the remote command to execute. argv array. Not executed within a shell.
   * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
   * @param name name of the PodExecOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
   * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
   * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
   * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
   */
  def connectGetNamespacedPodExec(command: Option[String] = None, container: Option[String] = None, name: String, namespace: String, stderr: Option[Boolean] = None, stdin: Option[Boolean] = None, stdout: Option[Boolean] = None, tty: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/exec", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("command", command)
      .withQueryParam("container", container)
      .withQueryParam("stderr", stderr)
      .withQueryParam("stdin", stdin)
      .withQueryParam("stdout", stdout)
      .withQueryParam("tty", tty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to portforward of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodPortForwardOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param ports List of ports to forward Required when using WebSockets
   */
  def connectGetNamespacedPodPortforward(name: String, namespace: String, ports: Option[Int] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/portforward", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("ports", ports)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectGetNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectGetNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectGetNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectGetNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectGetNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect GET requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectGetNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect HEAD requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectHeadNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.HEAD, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect HEAD requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectHeadNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.HEAD, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect HEAD requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectHeadNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.HEAD, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect HEAD requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectHeadNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.HEAD, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect HEAD requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectHeadNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.HEAD, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect HEAD requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectHeadNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.HEAD, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect OPTIONS requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectOptionsNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.OPTIONS, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect OPTIONS requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectOptionsNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.OPTIONS, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect OPTIONS requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectOptionsNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.OPTIONS, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect OPTIONS requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectOptionsNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.OPTIONS, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect OPTIONS requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectOptionsNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.OPTIONS, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect OPTIONS requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectOptionsNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.OPTIONS, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PATCH requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectPatchNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PATCH requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectPatchNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PATCH requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectPatchNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PATCH requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectPatchNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PATCH requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectPatchNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PATCH, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PATCH requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectPatchNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PATCH, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to attach of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
   * @param name name of the PodAttachOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
   * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
   * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
   * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
   */
  def connectPostNamespacedPodAttach(container: Option[String] = None, name: String, namespace: String, stderr: Option[Boolean] = None, stdin: Option[Boolean] = None, stdout: Option[Boolean] = None, tty: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/attach", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("container", container)
      .withQueryParam("stderr", stderr)
      .withQueryParam("stdin", stdin)
      .withQueryParam("stdout", stdout)
      .withQueryParam("tty", tty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to exec of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param command Command is the remote command to execute. argv array. Not executed within a shell.
   * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
   * @param name name of the PodExecOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
   * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
   * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
   * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
   */
  def connectPostNamespacedPodExec(command: Option[String] = None, container: Option[String] = None, name: String, namespace: String, stderr: Option[Boolean] = None, stdin: Option[Boolean] = None, stdout: Option[Boolean] = None, tty: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/exec", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("command", command)
      .withQueryParam("container", container)
      .withQueryParam("stderr", stderr)
      .withQueryParam("stdin", stdin)
      .withQueryParam("stdout", stdout)
      .withQueryParam("tty", tty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to portforward of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodPortForwardOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param ports List of ports to forward Required when using WebSockets
   */
  def connectPostNamespacedPodPortforward(name: String, namespace: String, ports: Option[Int] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/portforward", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("ports", ports)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectPostNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectPostNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectPostNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectPostNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectPostNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect POST requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectPostNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PUT requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the URL path to use for the current proxy request to pod.
   */
  def connectPutNamespacedPodProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PUT requests to proxy of Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to pod.
   */
  def connectPutNamespacedPodProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PUT requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectPutNamespacedServiceProxy(name: String, namespace: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PUT requests to proxy of Service
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceProxyOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
   */
  def connectPutNamespacedServiceProxyWithPath(name: String, namespace: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PUT requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path Path is the URL path to use for the current proxy request to node.
   */
  def connectPutNodeProxy(name: String, path: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PUT, baseUrl, "/api/v1/nodes/{name}/proxy", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path)
      .withPathParam("name", name)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * connect PUT requests to proxy of Node
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NodeProxyOptions
   * @param path path to the resource
   * @param path2 Path is the URL path to use for the current proxy request to node.
   */
  def connectPutNodeProxyWithPath(name: String, path: String, path2: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.PUT, baseUrl, "/api/v1/nodes/{name}/proxy/{path}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("path", path2)
      .withPathParam("name", name)
      .withPathParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 201 : V1Namespace (Created)
   *   code 202 : V1Namespace (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespace(pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Namespace)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.POST, baseUrl, "/api/v1/namespaces", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[V1Namespace](201)
      .withErrorResponse[V1Namespace](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Binding
   * 
   * Expected answers:
   *   code 200 : V1Binding (OK)
   *   code 201 : V1Binding (Created)
   *   code 202 : V1Binding (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param body 
   */
  def createNamespacedBinding(dryRun: Option[String] = None, fieldManager: Option[String] = None, namespace: String, pretty: Option[String] = None, body: V1Binding)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Binding] =
    ApiRequest[V1Binding](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/bindings", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("pretty", pretty)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Binding](200)
      .withErrorResponse[V1Binding](201)
      .withErrorResponse[V1Binding](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1ConfigMap (OK)
   *   code 201 : V1ConfigMap (Created)
   *   code 202 : V1ConfigMap (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedConfigMap(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ConfigMap)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ConfigMap] =
    ApiRequest[V1ConfigMap](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/configmaps", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ConfigMap](200)
      .withErrorResponse[V1ConfigMap](201)
      .withErrorResponse[V1ConfigMap](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create Endpoints
   * 
   * Expected answers:
   *   code 200 : V1Endpoints (OK)
   *   code 201 : V1Endpoints (Created)
   *   code 202 : V1Endpoints (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedEndpoints(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Endpoints)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Endpoints] =
    ApiRequest[V1Endpoints](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/endpoints", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Endpoints](200)
      .withErrorResponse[V1Endpoints](201)
      .withErrorResponse[V1Endpoints](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create an Event
   * 
   * Expected answers:
   *   code 200 : V1Event (OK)
   *   code 201 : V1Event (Created)
   *   code 202 : V1Event (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedEvent(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Event)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Event] =
    ApiRequest[V1Event](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/events", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Event](200)
      .withErrorResponse[V1Event](201)
      .withErrorResponse[V1Event](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a LimitRange
   * 
   * Expected answers:
   *   code 200 : V1LimitRange (OK)
   *   code 201 : V1LimitRange (Created)
   *   code 202 : V1LimitRange (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedLimitRange(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1LimitRange)(implicit apiKey: ApiKeyValue
): ApiRequest[V1LimitRange] =
    ApiRequest[V1LimitRange](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/limitranges", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1LimitRange](200)
      .withErrorResponse[V1LimitRange](201)
      .withErrorResponse[V1LimitRange](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 201 : V1PersistentVolumeClaim (Created)
   *   code 202 : V1PersistentVolumeClaim (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedPersistentVolumeClaim(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PersistentVolumeClaim)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[V1PersistentVolumeClaim](201)
      .withErrorResponse[V1PersistentVolumeClaim](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 201 : V1Pod (Created)
   *   code 202 : V1Pod (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedPod(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Pod)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[V1Pod](201)
      .withErrorResponse[V1Pod](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create binding of a Pod
   * 
   * Expected answers:
   *   code 200 : V1Binding (OK)
   *   code 201 : V1Binding (Created)
   *   code 202 : V1Binding (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param name name of the Binding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param body 
   */
  def createNamespacedPodBinding(dryRun: Option[String] = None, fieldManager: Option[String] = None, name: String, namespace: String, pretty: Option[String] = None, body: V1Binding)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Binding] =
    ApiRequest[V1Binding](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/binding", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Binding](200)
      .withErrorResponse[V1Binding](201)
      .withErrorResponse[V1Binding](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create eviction of a Pod
   * 
   * Expected answers:
   *   code 200 : V1beta1Eviction (OK)
   *   code 201 : V1beta1Eviction (Created)
   *   code 202 : V1beta1Eviction (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param name name of the Eviction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param body 
   */
  def createNamespacedPodEviction(dryRun: Option[String] = None, fieldManager: Option[String] = None, name: String, namespace: String, pretty: Option[String] = None, body: V1beta1Eviction)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1Eviction] =
    ApiRequest[V1beta1Eviction](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/eviction", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1Eviction](200)
      .withErrorResponse[V1beta1Eviction](201)
      .withErrorResponse[V1beta1Eviction](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1PodTemplate (OK)
   *   code 201 : V1PodTemplate (Created)
   *   code 202 : V1PodTemplate (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedPodTemplate(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PodTemplate)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodTemplate] =
    ApiRequest[V1PodTemplate](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PodTemplate](200)
      .withErrorResponse[V1PodTemplate](201)
      .withErrorResponse[V1PodTemplate](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 201 : V1ReplicationController (Created)
   *   code 202 : V1ReplicationController (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedReplicationController(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ReplicationController)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[V1ReplicationController](201)
      .withErrorResponse[V1ReplicationController](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 201 : V1ResourceQuota (Created)
   *   code 202 : V1ResourceQuota (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedResourceQuota(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ResourceQuota)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[V1ResourceQuota](201)
      .withErrorResponse[V1ResourceQuota](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Secret
   * 
   * Expected answers:
   *   code 200 : V1Secret (OK)
   *   code 201 : V1Secret (Created)
   *   code 202 : V1Secret (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedSecret(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Secret)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Secret] =
    ApiRequest[V1Secret](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/secrets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Secret](200)
      .withErrorResponse[V1Secret](201)
      .withErrorResponse[V1Secret](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 201 : V1Service (Created)
   *   code 202 : V1Service (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedService(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Service)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/services", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[V1Service](201)
      .withErrorResponse[V1Service](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1ServiceAccount (OK)
   *   code 201 : V1ServiceAccount (Created)
   *   code 202 : V1ServiceAccount (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedServiceAccount(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ServiceAccount)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceAccount] =
    ApiRequest[V1ServiceAccount](ApiMethods.POST, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ServiceAccount](200)
      .withErrorResponse[V1ServiceAccount](201)
      .withErrorResponse[V1ServiceAccount](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 201 : V1Node (Created)
   *   code 202 : V1Node (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNode(pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Node)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.POST, baseUrl, "/api/v1/nodes", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[V1Node](201)
      .withErrorResponse[V1Node](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 201 : V1PersistentVolume (Created)
   *   code 202 : V1PersistentVolume (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createPersistentVolume(pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PersistentVolume)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.POST, baseUrl, "/api/v1/persistentvolumes", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[V1PersistentVolume](201)
      .withErrorResponse[V1PersistentVolume](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedConfigMap(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/configmaps", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Endpoints
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedEndpoints(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/endpoints", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Event
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedEvent(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/events", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of LimitRange
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedLimitRange(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/limitranges", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedPersistentVolumeClaim(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Pod
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedPod(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/pods", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedPodTemplate(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedReplicationController(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedResourceQuota(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Secret
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedSecret(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/secrets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedServiceAccount(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Node
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNode(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/nodes", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionPersistentVolume(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/persistentvolumes", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a Namespace
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespace(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedConfigMap(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/configmaps/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete Endpoints
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedEndpoints(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/endpoints/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete an Event
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedEvent(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/events/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a LimitRange
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedLimitRange(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/limitranges/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedPersistentVolumeClaim(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a Pod
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedPod(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedPodTemplate(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedReplicationController(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedResourceQuota(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a Secret
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedSecret(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/secrets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a Service
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedService(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedServiceAccount(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a Node
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNode(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/nodes/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deletePersistentVolume(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/api/v1/persistentvolumes/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * get available resources
   * 
   * Expected answers:
   *   code 200 : V1APIResourceList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   */
  def getAPIResources()(implicit apiKey: ApiKeyValue
): ApiRequest[V1APIResourceList] =
    ApiRequest[V1APIResourceList](ApiMethods.GET, baseUrl, "/api/v1/", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withSuccessResponse[V1APIResourceList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list objects of kind ComponentStatus
   * 
   * Expected answers:
   *   code 200 : V1ComponentStatusList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listComponentStatus(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ComponentStatusList] =
    ApiRequest[V1ComponentStatusList](ApiMethods.GET, baseUrl, "/api/v1/componentstatuses", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1ComponentStatusList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1ConfigMapList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listConfigMapForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ConfigMapList] =
    ApiRequest[V1ConfigMapList](ApiMethods.GET, baseUrl, "/api/v1/configmaps", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1ConfigMapList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Endpoints
   * 
   * Expected answers:
   *   code 200 : V1EndpointsList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listEndpointsForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1EndpointsList] =
    ApiRequest[V1EndpointsList](ApiMethods.GET, baseUrl, "/api/v1/endpoints", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1EndpointsList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Event
   * 
   * Expected answers:
   *   code 200 : V1EventList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listEventForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1EventList] =
    ApiRequest[V1EventList](ApiMethods.GET, baseUrl, "/api/v1/events", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1EventList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind LimitRange
   * 
   * Expected answers:
   *   code 200 : V1LimitRangeList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listLimitRangeForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1LimitRangeList] =
    ApiRequest[V1LimitRangeList](ApiMethods.GET, baseUrl, "/api/v1/limitranges", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1LimitRangeList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Namespace
   * 
   * Expected answers:
   *   code 200 : V1NamespaceList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespace(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1NamespaceList] =
    ApiRequest[V1NamespaceList](ApiMethods.GET, baseUrl, "/api/v1/namespaces", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1NamespaceList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1ConfigMapList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedConfigMap(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ConfigMapList] =
    ApiRequest[V1ConfigMapList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/configmaps", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ConfigMapList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Endpoints
   * 
   * Expected answers:
   *   code 200 : V1EndpointsList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedEndpoints(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1EndpointsList] =
    ApiRequest[V1EndpointsList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/endpoints", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1EndpointsList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Event
   * 
   * Expected answers:
   *   code 200 : V1EventList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedEvent(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1EventList] =
    ApiRequest[V1EventList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/events", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1EventList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind LimitRange
   * 
   * Expected answers:
   *   code 200 : V1LimitRangeList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedLimitRange(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1LimitRangeList] =
    ApiRequest[V1LimitRangeList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/limitranges", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1LimitRangeList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaimList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedPersistentVolumeClaim(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaimList] =
    ApiRequest[V1PersistentVolumeClaimList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaimList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Pod
   * 
   * Expected answers:
   *   code 200 : V1PodList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedPod(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodList] =
    ApiRequest[V1PodList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PodList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1PodTemplateList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedPodTemplate(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodTemplateList] =
    ApiRequest[V1PodTemplateList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PodTemplateList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationControllerList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedReplicationController(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationControllerList] =
    ApiRequest[V1ReplicationControllerList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationControllerList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuotaList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedResourceQuota(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuotaList] =
    ApiRequest[V1ResourceQuotaList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuotaList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Secret
   * 
   * Expected answers:
   *   code 200 : V1SecretList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedSecret(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1SecretList] =
    ApiRequest[V1SecretList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/secrets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1SecretList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Service
   * 
   * Expected answers:
   *   code 200 : V1ServiceList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedService(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceList] =
    ApiRequest[V1ServiceList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/services", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ServiceList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1ServiceAccountList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedServiceAccount(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceAccountList] =
    ApiRequest[V1ServiceAccountList](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ServiceAccountList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Node
   * 
   * Expected answers:
   *   code 200 : V1NodeList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNode(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1NodeList] =
    ApiRequest[V1NodeList](ApiMethods.GET, baseUrl, "/api/v1/nodes", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1NodeList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listPersistentVolume(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeList] =
    ApiRequest[V1PersistentVolumeList](ApiMethods.GET, baseUrl, "/api/v1/persistentvolumes", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1PersistentVolumeList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaimList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listPersistentVolumeClaimForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaimList] =
    ApiRequest[V1PersistentVolumeClaimList](ApiMethods.GET, baseUrl, "/api/v1/persistentvolumeclaims", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1PersistentVolumeClaimList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Pod
   * 
   * Expected answers:
   *   code 200 : V1PodList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listPodForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodList] =
    ApiRequest[V1PodList](ApiMethods.GET, baseUrl, "/api/v1/pods", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1PodList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1PodTemplateList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listPodTemplateForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodTemplateList] =
    ApiRequest[V1PodTemplateList](ApiMethods.GET, baseUrl, "/api/v1/podtemplates", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1PodTemplateList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationControllerList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listReplicationControllerForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationControllerList] =
    ApiRequest[V1ReplicationControllerList](ApiMethods.GET, baseUrl, "/api/v1/replicationcontrollers", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1ReplicationControllerList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuotaList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listResourceQuotaForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuotaList] =
    ApiRequest[V1ResourceQuotaList](ApiMethods.GET, baseUrl, "/api/v1/resourcequotas", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1ResourceQuotaList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Secret
   * 
   * Expected answers:
   *   code 200 : V1SecretList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listSecretForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1SecretList] =
    ApiRequest[V1SecretList](ApiMethods.GET, baseUrl, "/api/v1/secrets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1SecretList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1ServiceAccountList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listServiceAccountForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceAccountList] =
    ApiRequest[V1ServiceAccountList](ApiMethods.GET, baseUrl, "/api/v1/serviceaccounts", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1ServiceAccountList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Service
   * 
   * Expected answers:
   *   code 200 : V1ServiceList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listServiceForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceList] =
    ApiRequest[V1ServiceList](ApiMethods.GET, baseUrl, "/api/v1/services", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1ServiceList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespace(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespaceStatus(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1ConfigMap (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedConfigMap(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ConfigMap] =
    ApiRequest[V1ConfigMap](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/configmaps/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ConfigMap](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Endpoints
   * 
   * Expected answers:
   *   code 200 : V1Endpoints (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedEndpoints(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Endpoints] =
    ApiRequest[V1Endpoints](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/endpoints/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Endpoints](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Event
   * 
   * Expected answers:
   *   code 200 : V1Event (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedEvent(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Event] =
    ApiRequest[V1Event](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/events/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Event](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified LimitRange
   * 
   * Expected answers:
   *   code 200 : V1LimitRange (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedLimitRange(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1LimitRange] =
    ApiRequest[V1LimitRange](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/limitranges/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1LimitRange](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedPersistentVolumeClaim(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedPersistentVolumeClaimStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedPod(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedPodStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1PodTemplate (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedPodTemplate(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodTemplate] =
    ApiRequest[V1PodTemplate](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PodTemplate](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicationController(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update scale of the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicationControllerScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Scale] =
    ApiRequest[V1Scale](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicationControllerStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedResourceQuota(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedResourceQuotaStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Secret
   * 
   * Expected answers:
   *   code 200 : V1Secret (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedSecret(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Secret] =
    ApiRequest[V1Secret](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/secrets/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Secret](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedService(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1ServiceAccount (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedServiceAccount(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceAccount] =
    ApiRequest[V1ServiceAccount](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ServiceAccount](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedServiceStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.PATCH, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNode(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.PATCH, baseUrl, "/api/v1/nodes/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNodeStatus(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.PATCH, baseUrl, "/api/v1/nodes/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchPersistentVolume(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.PATCH, baseUrl, "/api/v1/persistentvolumes/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchPersistentVolumeStatus(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.PATCH, baseUrl, "/api/v1/persistentvolumes/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified ComponentStatus
   * 
   * Expected answers:
   *   code 200 : V1ComponentStatus (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ComponentStatus
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readComponentStatus(name: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ComponentStatus] =
    ApiRequest[V1ComponentStatus](ApiMethods.GET, baseUrl, "/api/v1/componentstatuses/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withSuccessResponse[V1ComponentStatus](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespace(name: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespaceStatus(name: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1ConfigMap (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedConfigMap(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ConfigMap] =
    ApiRequest[V1ConfigMap](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/configmaps/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ConfigMap](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Endpoints
   * 
   * Expected answers:
   *   code 200 : V1Endpoints (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedEndpoints(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Endpoints] =
    ApiRequest[V1Endpoints](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/endpoints/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Endpoints](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Event
   * 
   * Expected answers:
   *   code 200 : V1Event (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedEvent(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Event] =
    ApiRequest[V1Event](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/events/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Event](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified LimitRange
   * 
   * Expected answers:
   *   code 200 : V1LimitRange (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedLimitRange(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1LimitRange] =
    ApiRequest[V1LimitRange](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/limitranges/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1LimitRange](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedPersistentVolumeClaim(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedPersistentVolumeClaimStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedPod(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read log of the specified Pod
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param container The container for which to stream logs. Defaults to only container if there is one container in the pod.
   * @param follow Follow the log stream of the pod. Defaults to false.
   * @param limitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param previous Return previous terminated container logs. Defaults to false.
   * @param sinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
   * @param tailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
   * @param timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
   */
  def readNamespacedPodLog(container: Option[String] = None, follow: Option[Boolean] = None, limitBytes: Option[Int] = None, name: String, namespace: String, pretty: Option[String] = None, previous: Option[Boolean] = None, sinceSeconds: Option[Int] = None, tailLines: Option[Int] = None, timestamps: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/log", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("container", container)
      .withQueryParam("follow", follow)
      .withQueryParam("limitBytes", limitBytes)
      .withQueryParam("pretty", pretty)
      .withQueryParam("previous", previous)
      .withQueryParam("sinceSeconds", sinceSeconds)
      .withQueryParam("tailLines", tailLines)
      .withQueryParam("timestamps", timestamps)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedPodStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1PodTemplate (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedPodTemplate(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodTemplate] =
    ApiRequest[V1PodTemplate](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PodTemplate](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedReplicationController(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read scale of the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedReplicationControllerScale(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Scale] =
    ApiRequest[V1Scale](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedReplicationControllerStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedResourceQuota(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedResourceQuotaStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Secret
   * 
   * Expected answers:
   *   code 200 : V1Secret (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedSecret(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Secret] =
    ApiRequest[V1Secret](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/secrets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Secret](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedService(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1ServiceAccount (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedServiceAccount(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceAccount] =
    ApiRequest[V1ServiceAccount](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ServiceAccount](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedServiceStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.GET, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNode(name: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.GET, baseUrl, "/api/v1/nodes/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNodeStatus(name: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.GET, baseUrl, "/api/v1/nodes/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readPersistentVolume(name: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.GET, baseUrl, "/api/v1/persistentvolumes/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readPersistentVolumeStatus(name: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.GET, baseUrl, "/api/v1/persistentvolumes/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 201 : V1Namespace (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespace(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Namespace)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[V1Namespace](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace finalize of the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 201 : V1Namespace (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param body 
   */
  def replaceNamespaceFinalize(dryRun: Option[String] = None, fieldManager: Option[String] = None, name: String, pretty: Option[String] = None, body: V1Namespace)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{name}/finalize", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[V1Namespace](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified Namespace
   * 
   * Expected answers:
   *   code 200 : V1Namespace (OK)
   *   code 201 : V1Namespace (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Namespace
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespaceStatus(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Namespace)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Namespace] =
    ApiRequest[V1Namespace](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[V1Namespace](200)
      .withErrorResponse[V1Namespace](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified ConfigMap
   * 
   * Expected answers:
   *   code 200 : V1ConfigMap (OK)
   *   code 201 : V1ConfigMap (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedConfigMap(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ConfigMap)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ConfigMap] =
    ApiRequest[V1ConfigMap](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/configmaps/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ConfigMap](200)
      .withErrorResponse[V1ConfigMap](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Endpoints
   * 
   * Expected answers:
   *   code 200 : V1Endpoints (OK)
   *   code 201 : V1Endpoints (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedEndpoints(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Endpoints)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Endpoints] =
    ApiRequest[V1Endpoints](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/endpoints/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Endpoints](200)
      .withErrorResponse[V1Endpoints](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Event
   * 
   * Expected answers:
   *   code 200 : V1Event (OK)
   *   code 201 : V1Event (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedEvent(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Event)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Event] =
    ApiRequest[V1Event](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/events/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Event](200)
      .withErrorResponse[V1Event](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified LimitRange
   * 
   * Expected answers:
   *   code 200 : V1LimitRange (OK)
   *   code 201 : V1LimitRange (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedLimitRange(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1LimitRange)(implicit apiKey: ApiKeyValue
): ApiRequest[V1LimitRange] =
    ApiRequest[V1LimitRange](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/limitranges/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1LimitRange](200)
      .withErrorResponse[V1LimitRange](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 201 : V1PersistentVolumeClaim (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedPersistentVolumeClaim(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PersistentVolumeClaim)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[V1PersistentVolumeClaim](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified PersistentVolumeClaim
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolumeClaim (OK)
   *   code 201 : V1PersistentVolumeClaim (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedPersistentVolumeClaimStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PersistentVolumeClaim)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolumeClaim] =
    ApiRequest[V1PersistentVolumeClaim](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PersistentVolumeClaim](200)
      .withErrorResponse[V1PersistentVolumeClaim](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 201 : V1Pod (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedPod(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Pod)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[V1Pod](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified Pod
   * 
   * Expected answers:
   *   code 200 : V1Pod (OK)
   *   code 201 : V1Pod (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedPodStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Pod)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Pod] =
    ApiRequest[V1Pod](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/pods/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Pod](200)
      .withErrorResponse[V1Pod](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified PodTemplate
   * 
   * Expected answers:
   *   code 200 : V1PodTemplate (OK)
   *   code 201 : V1PodTemplate (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedPodTemplate(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PodTemplate)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PodTemplate] =
    ApiRequest[V1PodTemplate](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/podtemplates/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1PodTemplate](200)
      .withErrorResponse[V1PodTemplate](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 201 : V1ReplicationController (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicationController(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ReplicationController)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[V1ReplicationController](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace scale of the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1Scale (OK)
   *   code 201 : V1Scale (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicationControllerScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Scale)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Scale] =
    ApiRequest[V1Scale](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Scale](200)
      .withErrorResponse[V1Scale](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified ReplicationController
   * 
   * Expected answers:
   *   code 200 : V1ReplicationController (OK)
   *   code 201 : V1ReplicationController (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicationControllerStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ReplicationController)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ReplicationController] =
    ApiRequest[V1ReplicationController](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ReplicationController](200)
      .withErrorResponse[V1ReplicationController](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 201 : V1ResourceQuota (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedResourceQuota(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ResourceQuota)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[V1ResourceQuota](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified ResourceQuota
   * 
   * Expected answers:
   *   code 200 : V1ResourceQuota (OK)
   *   code 201 : V1ResourceQuota (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedResourceQuotaStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ResourceQuota)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ResourceQuota] =
    ApiRequest[V1ResourceQuota](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ResourceQuota](200)
      .withErrorResponse[V1ResourceQuota](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Secret
   * 
   * Expected answers:
   *   code 200 : V1Secret (OK)
   *   code 201 : V1Secret (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedSecret(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Secret)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Secret] =
    ApiRequest[V1Secret](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/secrets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Secret](200)
      .withErrorResponse[V1Secret](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 201 : V1Service (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedService(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Service)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[V1Service](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified ServiceAccount
   * 
   * Expected answers:
   *   code 200 : V1ServiceAccount (OK)
   *   code 201 : V1ServiceAccount (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedServiceAccount(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1ServiceAccount)(implicit apiKey: ApiKeyValue
): ApiRequest[V1ServiceAccount] =
    ApiRequest[V1ServiceAccount](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1ServiceAccount](200)
      .withErrorResponse[V1ServiceAccount](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified Service
   * 
   * Expected answers:
   *   code 200 : V1Service (OK)
   *   code 201 : V1Service (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedServiceStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Service)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Service] =
    ApiRequest[V1Service](ApiMethods.PUT, baseUrl, "/api/v1/namespaces/{namespace}/services/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Service](200)
      .withErrorResponse[V1Service](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 201 : V1Node (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNode(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Node)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.PUT, baseUrl, "/api/v1/nodes/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[V1Node](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified Node
   * 
   * Expected answers:
   *   code 200 : V1Node (OK)
   *   code 201 : V1Node (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Node
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNodeStatus(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1Node)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Node] =
    ApiRequest[V1Node](ApiMethods.PUT, baseUrl, "/api/v1/nodes/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[V1Node](200)
      .withErrorResponse[V1Node](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 201 : V1PersistentVolume (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replacePersistentVolume(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PersistentVolume)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.PUT, baseUrl, "/api/v1/persistentvolumes/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[V1PersistentVolume](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified PersistentVolume
   * 
   * Expected answers:
   *   code 200 : V1PersistentVolume (OK)
   *   code 201 : V1PersistentVolume (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PersistentVolume
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replacePersistentVolumeStatus(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1PersistentVolume)(implicit apiKey: ApiKeyValue
): ApiRequest[V1PersistentVolume] =
    ApiRequest[V1PersistentVolume](ApiMethods.PUT, baseUrl, "/api/v1/persistentvolumes/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[V1PersistentVolume](200)
      .withErrorResponse[V1PersistentVolume](201)
      .withErrorResponse[Unit](401)
      



}

