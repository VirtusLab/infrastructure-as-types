/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.15.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.virtuslab.kubernetes.client.openapi.api

import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1Deployment
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1DeploymentList
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1DeploymentRollback
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1Ingress
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1IngressList
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1PodSecurityPolicy
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1PodSecurityPolicyList
import com.virtuslab.kubernetes.client.openapi.model.ExtensionsV1beta1Scale
import com.virtuslab.kubernetes.client.openapi.model.V1APIResourceList
import com.virtuslab.kubernetes.client.openapi.model.V1DeleteOptions
import com.virtuslab.kubernetes.client.custom.V1Patch
import com.virtuslab.kubernetes.client.openapi.model.V1Status
import com.virtuslab.kubernetes.client.openapi.model.V1beta1DaemonSet
import com.virtuslab.kubernetes.client.openapi.model.V1beta1DaemonSetList
import com.virtuslab.kubernetes.client.openapi.model.V1beta1NetworkPolicy
import com.virtuslab.kubernetes.client.openapi.model.V1beta1NetworkPolicyList
import com.virtuslab.kubernetes.client.openapi.model.V1beta1ReplicaSet
import com.virtuslab.kubernetes.client.openapi.model.V1beta1ReplicaSetList
import com.virtuslab.kubernetes.client.openapi.core._
import com.virtuslab.kubernetes.client.openapi.core.CollectionFormats._
import com.virtuslab.kubernetes.client.openapi.core.ApiKeyLocations._

object ExtensionsV1beta1Api {

  def apply(baseUrl: String = "http://localhost") = new ExtensionsV1beta1Api(baseUrl)
}

class ExtensionsV1beta1Api(baseUrl: String) {
  
  /**
   * create a DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 201 : V1beta1DaemonSet (Created)
   *   code 202 : V1beta1DaemonSet (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedDaemonSet(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1DaemonSet)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[V1beta1DaemonSet](201)
      .withErrorResponse[V1beta1DaemonSet](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 201 : ExtensionsV1beta1Deployment (Created)
   *   code 202 : ExtensionsV1beta1Deployment (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedDeployment(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Deployment)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[ExtensionsV1beta1Deployment](201)
      .withErrorResponse[ExtensionsV1beta1Deployment](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create rollback of a Deployment
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 201 : V1Status (Created)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param body 
   */
  def createNamespacedDeploymentRollback(dryRun: Option[String] = None, fieldManager: Option[String] = None, name: String, namespace: String, pretty: Option[String] = None, body: ExtensionsV1beta1DeploymentRollback)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](201)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create an Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 201 : ExtensionsV1beta1Ingress (Created)
   *   code 202 : ExtensionsV1beta1Ingress (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedIngress(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Ingress)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[ExtensionsV1beta1Ingress](201)
      .withErrorResponse[ExtensionsV1beta1Ingress](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1beta1NetworkPolicy (OK)
   *   code 201 : V1beta1NetworkPolicy (Created)
   *   code 202 : V1beta1NetworkPolicy (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedNetworkPolicy(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1NetworkPolicy)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1NetworkPolicy] =
    ApiRequest[V1beta1NetworkPolicy](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1NetworkPolicy](200)
      .withErrorResponse[V1beta1NetworkPolicy](201)
      .withErrorResponse[V1beta1NetworkPolicy](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 201 : V1beta1ReplicaSet (Created)
   *   code 202 : V1beta1ReplicaSet (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createNamespacedReplicaSet(namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1ReplicaSet)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[V1beta1ReplicaSet](201)
      .withErrorResponse[V1beta1ReplicaSet](202)
      .withErrorResponse[Unit](401)
      

  /**
   * create a PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1PodSecurityPolicy (OK)
   *   code 201 : ExtensionsV1beta1PodSecurityPolicy (Created)
   *   code 202 : ExtensionsV1beta1PodSecurityPolicy (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def createPodSecurityPolicy(pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1PodSecurityPolicy)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1PodSecurityPolicy] =
    ApiRequest[ExtensionsV1beta1PodSecurityPolicy](ApiMethods.POST, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withSuccessResponse[ExtensionsV1beta1PodSecurityPolicy](200)
      .withErrorResponse[ExtensionsV1beta1PodSecurityPolicy](201)
      .withErrorResponse[ExtensionsV1beta1PodSecurityPolicy](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedDaemonSet(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Deployment
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedDeployment(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of Ingress
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedIngress(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedNetworkPolicy(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionNamespacedReplicaSet(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete collection of PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   * @param body 
   */
  def deleteCollectionPodSecurityPolicy(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, dryRun: Option[String] = None, fieldSelector: Option[String] = None, gracePeriodSeconds: Option[Int] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedDaemonSet(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a Deployment
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedDeployment(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete an Ingress
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedIngress(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedNetworkPolicy(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deleteNamespacedReplicaSet(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * delete a PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : V1Status (OK)
   *   code 202 : V1Status (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodSecurityPolicy
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   * @param body 
   */
  def deletePodSecurityPolicy(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, gracePeriodSeconds: Option[Int] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None, body: Option[V1DeleteOptions] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1Status] =
    ApiRequest[V1Status](ApiMethods.DELETE, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("gracePeriodSeconds", gracePeriodSeconds)
      .withQueryParam("orphanDependents", orphanDependents)
      .withQueryParam("propagationPolicy", propagationPolicy)
      .withPathParam("name", name)
      .withSuccessResponse[V1Status](200)
      .withErrorResponse[V1Status](202)
      .withErrorResponse[Unit](401)
      

  /**
   * get available resources
   * 
   * Expected answers:
   *   code 200 : V1APIResourceList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   */
  def getAPIResources()(implicit apiKey: ApiKeyValue
): ApiRequest[V1APIResourceList] =
    ApiRequest[V1APIResourceList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withSuccessResponse[V1APIResourceList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSetList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listDaemonSetForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSetList] =
    ApiRequest[V1beta1DaemonSetList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/daemonsets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1beta1DaemonSetList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1DeploymentList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listDeploymentForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1DeploymentList] =
    ApiRequest[ExtensionsV1beta1DeploymentList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/deployments", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[ExtensionsV1beta1DeploymentList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1IngressList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listIngressForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1IngressList] =
    ApiRequest[ExtensionsV1beta1IngressList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/ingresses", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[ExtensionsV1beta1IngressList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSetList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedDaemonSet(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSetList] =
    ApiRequest[V1beta1DaemonSetList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSetList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1DeploymentList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedDeployment(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1DeploymentList] =
    ApiRequest[ExtensionsV1beta1DeploymentList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1DeploymentList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1IngressList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedIngress(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1IngressList] =
    ApiRequest[ExtensionsV1beta1IngressList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1IngressList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1beta1NetworkPolicyList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedNetworkPolicy(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1NetworkPolicyList] =
    ApiRequest[V1beta1NetworkPolicyList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1NetworkPolicyList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSetList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNamespacedReplicaSet(namespace: String, pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSetList] =
    ApiRequest[V1beta1ReplicaSetList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSetList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1beta1NetworkPolicyList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listNetworkPolicyForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1NetworkPolicyList] =
    ApiRequest[V1beta1NetworkPolicyList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/networkpolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1beta1NetworkPolicyList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1PodSecurityPolicyList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param pretty If 'true', then the output is pretty printed.
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listPodSecurityPolicy(pretty: Option[String] = None, allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1PodSecurityPolicyList] =
    ApiRequest[ExtensionsV1beta1PodSecurityPolicyList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[ExtensionsV1beta1PodSecurityPolicyList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * list or watch objects of kind ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSetList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If 'true', then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  def listReplicaSetForAllNamespaces(allowWatchBookmarks: Option[Boolean] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, labelSelector: Option[String] = None, limit: Option[Int] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Int] = None, watch: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSetList] =
    ApiRequest[V1beta1ReplicaSetList](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/replicasets", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("allowWatchBookmarks", allowWatchBookmarks)
      .withQueryParam("continue", continue)
      .withQueryParam("fieldSelector", fieldSelector)
      .withQueryParam("labelSelector", labelSelector)
      .withQueryParam("limit", limit)
      .withQueryParam("pretty", pretty)
      .withQueryParam("resourceVersion", resourceVersion)
      .withQueryParam("timeoutSeconds", timeoutSeconds)
      .withQueryParam("watch", watch)
      .withSuccessResponse[V1beta1ReplicaSetList](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedDaemonSet(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedDaemonSetStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedDeployment(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update scale of the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedDeploymentScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedDeploymentStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedIngress(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedIngressStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1beta1NetworkPolicy (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedNetworkPolicy(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1NetworkPolicy] =
    ApiRequest[V1beta1NetworkPolicy](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1NetworkPolicy](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicaSet(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update scale of the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicaSetScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update status of the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicaSetStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update scale of the specified ReplicationControllerDummy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchNamespacedReplicationControllerDummyScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * partially update the specified PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1PodSecurityPolicy (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodSecurityPolicy
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
   * @param force Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
   * @param body 
   */
  def patchPodSecurityPolicy(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, force: Option[Boolean] = None, body: V1Patch)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1PodSecurityPolicy] =
    ApiRequest[ExtensionsV1beta1PodSecurityPolicy](ApiMethods.PATCH, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", "application/json-patch+json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withQueryParam("force", force)
      .withPathParam("name", name)
      .withSuccessResponse[ExtensionsV1beta1PodSecurityPolicy](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedDaemonSet(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedDaemonSetStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedDeployment(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read scale of the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedDeploymentScale(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedDeploymentStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedIngress(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedIngressStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1beta1NetworkPolicy (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedNetworkPolicy(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1NetworkPolicy] =
    ApiRequest[V1beta1NetworkPolicy](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1NetworkPolicy](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readNamespacedReplicaSet(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read scale of the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedReplicaSetScale(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read status of the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedReplicaSetStatus(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read scale of the specified ReplicationControllerDummy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   */
  def readNamespacedReplicationControllerDummyScale(name: String, namespace: String, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[Unit](401)
      

  /**
   * read the specified PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1PodSecurityPolicy (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodSecurityPolicy
   * @param pretty If 'true', then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
   * @param export Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
   */
  def readPodSecurityPolicy(name: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1PodSecurityPolicy] =
    ApiRequest[ExtensionsV1beta1PodSecurityPolicy](ApiMethods.GET, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withQueryParam("pretty", pretty)
      .withQueryParam("exact", exact)
      .withQueryParam("export", export)
      .withPathParam("name", name)
      .withSuccessResponse[ExtensionsV1beta1PodSecurityPolicy](200)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 201 : V1beta1DaemonSet (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedDaemonSet(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1DaemonSet)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[V1beta1DaemonSet](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified DaemonSet
   * 
   * Expected answers:
   *   code 200 : V1beta1DaemonSet (OK)
   *   code 201 : V1beta1DaemonSet (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedDaemonSetStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1DaemonSet)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1DaemonSet] =
    ApiRequest[V1beta1DaemonSet](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1DaemonSet](200)
      .withErrorResponse[V1beta1DaemonSet](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 201 : ExtensionsV1beta1Deployment (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedDeployment(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Deployment)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[ExtensionsV1beta1Deployment](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace scale of the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 201 : ExtensionsV1beta1Scale (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedDeploymentScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Scale)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[ExtensionsV1beta1Scale](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified Deployment
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Deployment (OK)
   *   code 201 : ExtensionsV1beta1Deployment (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedDeploymentStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Deployment)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Deployment] =
    ApiRequest[ExtensionsV1beta1Deployment](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Deployment](200)
      .withErrorResponse[ExtensionsV1beta1Deployment](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 201 : ExtensionsV1beta1Ingress (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedIngress(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Ingress)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[ExtensionsV1beta1Ingress](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified Ingress
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Ingress (OK)
   *   code 201 : ExtensionsV1beta1Ingress (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedIngressStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Ingress)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Ingress] =
    ApiRequest[ExtensionsV1beta1Ingress](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Ingress](200)
      .withErrorResponse[ExtensionsV1beta1Ingress](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified NetworkPolicy
   * 
   * Expected answers:
   *   code 200 : V1beta1NetworkPolicy (OK)
   *   code 201 : V1beta1NetworkPolicy (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedNetworkPolicy(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1NetworkPolicy)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1NetworkPolicy] =
    ApiRequest[V1beta1NetworkPolicy](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1NetworkPolicy](200)
      .withErrorResponse[V1beta1NetworkPolicy](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 201 : V1beta1ReplicaSet (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicaSet(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1ReplicaSet)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[V1beta1ReplicaSet](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace scale of the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 201 : ExtensionsV1beta1Scale (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicaSetScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Scale)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[ExtensionsV1beta1Scale](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace status of the specified ReplicaSet
   * 
   * Expected answers:
   *   code 200 : V1beta1ReplicaSet (OK)
   *   code 201 : V1beta1ReplicaSet (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicaSetStatus(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: V1beta1ReplicaSet)(implicit apiKey: ApiKeyValue
): ApiRequest[V1beta1ReplicaSet] =
    ApiRequest[V1beta1ReplicaSet](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[V1beta1ReplicaSet](200)
      .withErrorResponse[V1beta1ReplicaSet](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace scale of the specified ReplicationControllerDummy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1Scale (OK)
   *   code 201 : ExtensionsV1beta1Scale (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replaceNamespacedReplicationControllerDummyScale(name: String, namespace: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1Scale)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1Scale] =
    ApiRequest[ExtensionsV1beta1Scale](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[ExtensionsV1beta1Scale](200)
      .withErrorResponse[ExtensionsV1beta1Scale](201)
      .withErrorResponse[Unit](401)
      

  /**
   * replace the specified PodSecurityPolicy
   * 
   * Expected answers:
   *   code 200 : ExtensionsV1beta1PodSecurityPolicy (OK)
   *   code 201 : ExtensionsV1beta1PodSecurityPolicy (Created)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param name name of the PodSecurityPolicy
   * @param pretty If 'true', then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
   * @param body 
   */
  def replacePodSecurityPolicy(name: String, pretty: Option[String] = None, dryRun: Option[String] = None, fieldManager: Option[String] = None, body: ExtensionsV1beta1PodSecurityPolicy)(implicit apiKey: ApiKeyValue
): ApiRequest[ExtensionsV1beta1PodSecurityPolicy] =
    ApiRequest[ExtensionsV1beta1PodSecurityPolicy](ApiMethods.PUT, baseUrl, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withQueryParam("dryRun", dryRun)
      .withQueryParam("fieldManager", fieldManager)
      .withPathParam("name", name)
      .withSuccessResponse[ExtensionsV1beta1PodSecurityPolicy](200)
      .withErrorResponse[ExtensionsV1beta1PodSecurityPolicy](201)
      .withErrorResponse[Unit](401)
      



}

